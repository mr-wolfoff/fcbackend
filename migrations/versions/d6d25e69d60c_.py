"""empty message

Revision ID: d6d25e69d60c
Revises: 
Create Date: 2024-07-18 16:46:28.690201

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'd6d25e69d60c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_accepted', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('premium_until', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('listing',
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('date_from', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('date_to', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('price', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('comments', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_rented', sa.Boolean(), nullable=True),
    sa.Column('message_ids', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('channel_id', sa.BigInteger(), nullable=True),
    sa.Column('status', sa.Enum('CREATED', 'FINISHED', 'SENT_TO_ADMINS', 'UPDATE_SENT_TO_ADMINS', 'POSTED', 'UPDATED', 'UPDATE_POSTED', 'DUMPED', 'INFO_NEEDED', 'PAYMENT_NEEDED', 'ACTIVE', name='listingstatus'), nullable=True),
    sa.Column('listing_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('is_for_preview', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('listing_id')
    )
    op.create_table('oauthaccount',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('oauth_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('access_token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('expires_at', sa.Integer(), nullable=True),
    sa.Column('refresh_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('account_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('account_email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_oauthaccount_account_id'), 'oauthaccount', ['account_id'], unique=False)
    op.create_index(op.f('ix_oauthaccount_oauth_name'), 'oauthaccount', ['oauth_name'], unique=False)
    op.create_table('payment',
    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('payment_system_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status_payment_system', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('payment_system', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('payment_system_json', sa.JSON(), nullable=True),
    sa.Column('period', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=True),
    sa.Column('first_payment_system_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_recurrent', sa.Boolean(), nullable=True),
    sa.Column('is_first_recurrent', sa.Boolean(), nullable=True),
    sa.Column('amount_after', sa.Float(), nullable=True),
    sa.Column('period_after', sa.Integer(), nullable=True),
    sa.Column('payment_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('payment_id')
    )
    op.create_table('recursivepaymentcharge',
    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('payment_id', sa.Integer(), nullable=True),
    sa.Column('payment_system_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('datetime_to_charge', sa.DateTime(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('successful', sa.Boolean(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=True),
    sa.Column('charge_tries', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('recursive_payment_charge_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('recursive_payment_charge_id')
    )
    op.create_table('useraccessrequest',
    sa.Column('status', sa.Enum('CREATED', 'PRE_SENT_TO_ADMINS', 'SENT_TO_ADMINS', 'INFO_REQUESTED', 'DECLINED', 'ACCEPTED', 'IN_CHAT', 'NO_PAYSLIP_REPOST', 'BAD_REPOST', name='accessrequeststatus'), nullable=True),
    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('user_access_request_id', sa.Integer(), nullable=False),
    sa.Column('admin_messages_tg', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_access_request_id')
    )
    op.create_table('userinfo',
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('how_did_you_hear', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tg_id', sa.BigInteger(), nullable=True),
    sa.Column('onboarding_step', sa.Float(), nullable=True),
    sa.Column('onboarding_completed', sa.Boolean(), nullable=True),
    sa.Column('tg_username', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('whatsapp', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('instagram', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('linkedin', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('picture_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('where_to_rent', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('where_to_let', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('meet', sa.Boolean(), nullable=True),
    sa.Column('notifications', sa.Boolean(), nullable=True),
    sa.Column('contact_email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('blocked_timestamp', sa.DateTime(), nullable=True),
    sa.Column('bot_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('listingpicture',
    sa.Column('status', sa.Enum('USED', 'DELETED', name='listingpicturestatus'), nullable=True),
    sa.Column('listing_id', sa.Integer(), nullable=False),
    sa.Column('listing_picture_id', sa.Integer(), nullable=False),
    sa.Column('picture_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['listing_id'], ['listing.listing_id'], ),
    sa.PrimaryKeyConstraint('listing_picture_id')
    )
    op.create_table('userlistinglink',
    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('listing_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['listing_id'], ['listing.listing_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'listing_id')
    )
    op.create_table('listinglistingpicturelink',
    sa.Column('listing_id', sa.Integer(), nullable=False),
    sa.Column('listing_picture_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['listing_id'], ['listing.listing_id'], ),
    sa.ForeignKeyConstraint(['listing_picture_id'], ['listingpicture.listing_picture_id'], ),
    sa.PrimaryKeyConstraint('listing_id', 'listing_picture_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('listinglistingpicturelink')
    op.drop_table('userlistinglink')
    op.drop_table('listingpicture')
    op.drop_table('userinfo')
    op.drop_table('useraccessrequest')
    op.drop_table('recursivepaymentcharge')
    op.drop_table('payment')
    op.drop_index(op.f('ix_oauthaccount_oauth_name'), table_name='oauthaccount')
    op.drop_index(op.f('ix_oauthaccount_account_id'), table_name='oauthaccount')
    op.drop_table('oauthaccount')
    op.drop_table('listing')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###
